(function($,se,ce,T,U,ie,D,h,a,e,X,O,de,le,ue){"use strict";function ge(t){const{metro:{findByProps:s,findByStoreName:u,common:{lodash:{merge:i}}}}=t,c=s("_sendMessage"),{createBotMessage:o}=s("createBotMessage"),n=s("BOT_AVATARS"),{getChannelId:d}=u("SelectedChannelStore");return function(r,p){var f;if(r.channelId??(r.channelId=d()),[null,void 0].includes(r.channelId))throw new Error("No channel id to receive the message into (channelId)");let R=r;if(r.really){typeof p=="object"&&(R=i(R,p));const l=[R,{}];(f=l[0]).tts??(f.tts=!1);for(const E of["allowedMentions","messageReference"])E in l[0]&&(l[1][E]=l[0][E],delete l[0][E]);const y="overwriteSendMessageArg2";return y in l[0]&&(l[1]=l[0][y],delete l[0][y]),c._sendMessage(r.channelId,...l)}return p!==!0&&(R=o(R)),typeof p=="object"&&(R=i(R,p),typeof p.author=="object"&&function(){const l=p.author;typeof l.avatarURL=="string"&&(n.BOT_AVATARS[l.avatar??l.avatarURL]=l.avatarURL,l.avatar??(l.avatar=l.avatarURL),delete l.avatarURL)}()),c.receiveMessage(R.channel_id,R),R}}function he(t,s=27){if(typeof t!="string")throw new Error("Passed chars isn't a string");if(t?.length<=0)throw new Error("Invalid chars length");let u="";for(let i=0;i<s;i++)u+=t[Math.floor(Math.random()*t.length)];return u}const fe={command:"https://cdn.discordapp.com/attachments/1099116247364407337/1112129955053187203/command.png"},q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",K=q.replace("+/","_-");function ye(t,s){if(typeof t!="number")throw new Error(`Passed data isn't a number (received: ${typeof t})`);let u="";for(;t>0;)u=(s?K:q).charAt(t%64)+u,t=Math.floor(t/64);return u}const B=[],pe=1e3;function g(t,s,u=null){const i={timestamp:new Date().toISOString(),type:t,message:s,data:u};B.unshift(i),B.length>pe&&B.pop(),a.storage?.settings?.enableUnsafeFeatures&&console.log(`[AccountSwitcher] ${t.toUpperCase()}: ${s}`,u||"")}function J(){return B}function we(){B.length=0,g("info","Logs cleared")}function Z(t){let s=0;if(t.length===0)return s.toString();for(let u=0;u<t.length;u++){const i=t.charCodeAt(u);s=(s<<5)-s+i,s=s&s}return Math.abs(s).toString(36)}function be({dialogInfo:t,onCancel:s,onSuccess:u,storage:i}){const[c,o]=e.React.useState(""),n=()=>{if(!c.trim()){h.showToast("Please enter the password",1);return}Z(c)===i.settings.exportPasswordHash?(g("info","Password verification successful",{type:t.type}),u()):(g("warn","Incorrect password attempt",{type:t.type}),h.showToast("Incorrect password",1))};return e.React.createElement(e.ReactNative.View,{style:{flex:1,backgroundColor:"#2f3136"}},[e.React.createElement(e.ReactNative.View,{key:"pwd-header",style:{flexDirection:"row",alignItems:"center",padding:16,backgroundColor:"#202225",borderBottomWidth:1,borderBottomColor:"#40444b"}},[e.React.createElement(e.ReactNative.TouchableOpacity,{key:"back",onPress:s,style:{marginRight:16}},e.React.createElement(e.ReactNative.Text,{style:{color:"#7289da",fontSize:16}},"\u2190 Cancel")),e.React.createElement(e.ReactNative.Text,{key:"title",style:{color:"white",fontSize:18,fontWeight:"bold"}},t.title)]),e.React.createElement(e.ReactNative.View,{key:"pwd-content",style:{flex:1,padding:16,justifyContent:"center"}},[e.React.createElement(e.ReactNative.Text,{key:"message",style:{color:"#b9bbbe",fontSize:16,marginBottom:20,textAlign:"center"}},t.message),e.React.createElement(e.ReactNative.TextInput,{key:"password-input",placeholder:"Enter password",placeholderTextColor:"#72767d",value:c,onChangeText:o,secureTextEntry:!0,style:{backgroundColor:"#40444b",color:"white",padding:16,borderRadius:8,marginBottom:20,fontSize:16}}),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"confirm-btn",onPress:n,style:{backgroundColor:"#7289da",paddingVertical:16,paddingHorizontal:20,borderRadius:8,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:18,fontWeight:"bold"}},"Confirm"))])])}T.findByStoreName("UserStore");const Re=T.findByProps("getToken"),ve=async(t,s)=>{(u=>{t.settings?.exportPasswordHash?s({type:"export",title:"Enter Export Password",message:"Enter your password to export accounts",callback:u}):u()})(()=>{O.showConfirmationAlert({title:"\u26A0\uFE0F Export Accounts - Security Warning",content:"Exporting accounts is UNSAFE and may lead to account takeover if shared with others. The export contains sensitive authentication tokens that give full access to your accounts. Only proceed if you understand the risks and will keep the data secure.",confirmText:"I Understand - Export",cancelText:"Cancel",confirmColor:"brand",onConfirm:async()=>{try{g("info","Starting account export");const u=t.accounts||{},i=Object.values(u).map(o=>({username:o.username,discriminator:o.discriminator,avatar:o.avatar,id:o.id,token:o.token,addedAt:o.addedAt||Date.now()})),c={accounts:i,exportPasswordHash:t.settings?.exportPasswordHash||null,exportedAt:Date.now(),version:"2.0"};e.clipboard.setString(JSON.stringify(c,null,2)),g("info","Accounts exported successfully",{count:i.length}),h.showToast(`Exported ${i.length} accounts to clipboard`,0)}catch(u){g("error","Failed to export accounts",{error:u.message}),console.error("Export error:",u),h.showToast("Failed to export accounts",1)}}})})},Te=async(t,s,u)=>{(i=>{t.settings?.exportPasswordHash?s({type:"import",title:"Enter Import Password",message:"Enter your password to import accounts",callback:i}):i()})(()=>{O.showConfirmationAlert({title:"\u26A0\uFE0F Import Accounts - Security Warning",content:"Importing accounts is UNSAFE and may compromise your security if the data comes from untrusted sources. Only import data you exported yourself or from sources you completely trust. Malicious imports could lead to account takeover.",confirmText:"I Understand - Import",cancelText:"Cancel",confirmColor:"brand",onConfirm:async()=>{try{g("info","Starting account import");let i=u.trim();if(!i)try{i=await e.clipboard.getString()}catch(r){g("error","Failed to get clipboard data",{error:r.message}),h.showToast("No data in clipboard or input field",1);return}if(!i){g("warn","No data to import"),h.showToast("No data to import",1);return}const c=JSON.parse(i);let o;if(c.accounts&&Array.isArray(c.accounts)){if(c.exportPasswordHash&&(!t.settings?.exportPasswordHash||t.settings.exportPasswordHash!==c.exportPasswordHash)){g("error","Import password mismatch"),h.showToast("Import password mismatch or not set locally",1);return}o=c.accounts,c.exportPasswordHash&&!t.settings?.exportPasswordHash&&(t.settings.exportPasswordHash=c.exportPasswordHash,g("info","Import password hash set from import data"))}else if(Array.isArray(c))o=c,g("debug","Using legacy import format");else{g("error","Invalid import format"),h.showToast("Invalid import format",1);return}let n=0,d=0;o.forEach(r=>{r.id&&r.token&&r.username&&(t.accounts[r.id]?d++:(t.accounts[r.id]={id:r.id,username:r.username,discriminator:r.discriminator||"0",avatar:r.avatar||null,displayName:r.displayName||r.username,token:r.token,addedAt:r.addedAt||Date.now()},t.accountOrder.includes(r.id)||t.accountOrder.push(r.id),n++))}),g("info","Import completed",{imported:n,skipped:d}),h.showToast(`Imported ${n} accounts, skipped ${d} duplicates`,0)}catch(i){g("error","Import failed",{error:i.message}),console.error("Import error:",i),h.showToast("Failed to import - invalid format or password mismatch",1)}}})})},ke=(t,s,u,i,c)=>{if(!s.trim()){h.showToast("Please enter a password",1);return}if(s!==u){h.showToast("Passwords don't match",1);return}const o=Z(s);t.settings.exportPasswordHash=o,i(""),c(""),g("info","Export password set successfully"),h.showToast("Export password set successfully",0)},me=(t,s)=>{(u=>{s({type:"remove",title:"Enter Password to Remove",message:"Enter your current password to remove protection",callback:u})})(()=>{O.showConfirmationAlert({title:"Remove Export Password",content:"Are you sure you want to remove the export password? This will make exports/imports less secure.",confirmText:"Remove Password",cancelText:"Cancel",confirmColor:"brand",onConfirm:()=>{delete t.settings.exportPasswordHash,g("info","Export password removed"),h.showToast("Export password removed",0)}})})},Se=async(t,s,u,i)=>{if(t.settings.enableUnsafeFeatures){i(!0),g("info","Starting token account addition");try{let c=s.trim();if(c||(c=Re.getToken(),g("debug","Using current account token")),!c.startsWith("Bot ")&&!c.match(/^[A-Za-z0-9_-]{24,}\.[A-Za-z0-9_-]{6}\.[A-Za-z0-9_-]{27,}$/)){g("error","Invalid token format provided"),h.showToast("Invalid token format",1),i(!1);return}g("debug","Fetching user info from Discord API");const o=await fetch("https://discord.com/api/v9/users/@me",{headers:{Authorization:c,"Content-Type":"application/json"}});if(!o.ok){g("error","Discord API request failed",{status:o.status,statusText:o.statusText}),h.showToast("Invalid or expired token",1),i(!1);return}const n=await o.json();g("info","Successfully retrieved user info",{username:n.username,id:n.id});const d={id:n.id,username:n.username,discriminator:n.discriminator,avatar:n.avatar,displayName:n.global_name||n.username};if(t.accounts[d.id]){g("warn","Account already exists",{username:d.username}),h.showToast(`Account ${d.username} already saved`,1),i(!1);return}const r={...d,token:c,addedAt:Date.now()};t.accounts[d.id]=r,t.accountOrder.includes(d.id)||t.accountOrder.push(d.id),u(""),g("info","Account added successfully via token",{username:d.username}),h.showToast(`Account ${d.username} added!`,0)}catch(c){g("error","Failed to add account via token",{error:c.message,stack:c.stack}),console.error("Add account error:",c),h.showToast("Failed to add account",1)}i(!1)}},Ee=async()=>{O.showConfirmationAlert({title:"Force Logout",content:"This will logout your current session by using an invalid token. Your saved accounts will remain intact. Continue?",confirmText:"Force Logout",cancelText:"Cancel",confirmColor:"brand",onConfirm:async()=>{try{g("info","Starting force logout");const t="MTExMTExMTExMTExMTExMTEx.GxxxXx.xXxXxXxXxXxXxXxXxXxXxXxXxXxXx";await T.findByProps("login","logout","switchAccountToken").switchAccountToken(t),g("info","Force logout completed successfully"),h.showToast("Force logout successful - you can now login to a different account",0)}catch(t){g("warn","Force logout completed with error",{error:t.message}),console.error("Force logout error:",t),h.showToast("Force logout completed",0)}}})},xe=async(t,s,u,i,c,o,n)=>{if(!s.trim()||!u.trim()){h.showToast("Please enter both email and password",1);return}n(!0),g("info","Starting credential-based account addition",{email:s.trim()});try{const d=await fetch("https://discord.com/api/v9/auth/login",{method:"POST",headers:{"Content-Type":"application/json","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"},body:JSON.stringify({login:s.trim(),password:u.trim()})}),r=await d.json();if(!d.ok||!r.token){g("error","Discord login failed",{status:d.status,message:r.message,errors:r.errors,captchaRequired:!!r.captcha_key});let l="Login failed";if(r.captcha_key)l="Captcha required - please login through Discord first";else if(r.message){const y=r.message.toLowerCase();y.includes("invalid")&&(y.includes("email")||y.includes("phone")||y.includes("login"))?l="Invalid email or username":y.includes("password")?l="Invalid password":y.includes("account")?l="Account issue - check your credentials":y.includes("rate limit")||y.includes("too many")?l="Too many attempts - please wait and try again":y.includes("mfa")||y.includes("2fa")||y.includes("verification")?l="2FA/MFA accounts not supported via credentials":l="Login failed - check your credentials"}else if(r.errors){const y=r.errors;y.login?l="Invalid email or username":y.password?l="Invalid password":l="Invalid credentials"}else d.status===401?l="Invalid credentials":d.status===429?l="Rate limited - please wait and try again":d.status>=500&&(l="Discord servers are having issues - try again later");h.showToast(l,1),n(!1);return}g("debug","Login successful, fetching user info");const p=await fetch("https://discord.com/api/v9/users/@me",{headers:{Authorization:r.token}});if(!p.ok){g("error","Failed to get user info after login",{status:p.status}),h.showToast("Login succeeded but failed to get user info - check logs",1),n(!1);return}const f=await p.json();if(t.accounts[f.id]){g("warn","Account already exists",{username:f.username}),h.showToast(`Account ${f.username} already saved`,1),n(!1);return}const R={id:f.id,username:f.username,discriminator:f.discriminator,avatar:f.avatar,displayName:f.global_name||f.username,token:r.token,addedAt:Date.now()};t.accounts[f.id]=R,t.accountOrder.includes(f.id)||t.accountOrder.push(f.id),i(""),c(""),o(!1),g("info","Account added successfully via credentials",{username:f.username}),h.showToast(`Account ${f.username} added successfully!`,0)}catch(d){g("error","Credential login failed",{error:d.message,stack:d.stack}),console.error("Login error:",d);let r="Login failed - check logs for more info";d.message.includes("network")||d.message.includes("fetch")?r="Network error - check your connection":d.message.includes("timeout")&&(r="Request timed out - try again"),h.showToast(r,1)}n(!1)},Y=T.findByStoreName("UserStore"),Q=T.findByProps("getToken");a.storage.accounts||(a.storage.accounts={}),a.storage.accountOrder||(a.storage.accountOrder=[]),a.storage.settings?(a.storage.settings.enableUnsafeFeatures===void 0&&(a.storage.settings.enableUnsafeFeatures=!1),a.storage.settings.enableCLI===void 0&&(a.storage.settings.enableCLI=a.storage.settings.showAccountNames!==!1),a.storage.settings.confirmBeforeDelete===void 0&&(a.storage.settings.confirmBeforeDelete=!0),a.storage.settings.addToSidebar===void 0&&(a.storage.settings.addToSidebar=!0),a.storage.settings.showAccountNames!==void 0&&delete a.storage.settings.showAccountNames):a.storage.settings={enableCLI:!0,confirmBeforeDelete:!0,enableUnsafeFeatures:!1,addToSidebar:!0},g("info","AccountSwitcher plugin initialized",{accountsCount:Object.keys(a.storage.accounts).length,cliEnabled:a.storage.settings.enableCLI,unsafeFeaturesEnabled:a.storage.settings.enableUnsafeFeatures});function Ce({onBack:t}){X.useProxy(a.storage);const[s,u]=e.React.useState(""),[i,c]=e.React.useState(!1),[o,n]=e.React.useState(""),[d,r]=e.React.useState(null),[p,f]=e.React.useState(""),[R,l]=e.React.useState(""),y=(v,P)=>{const C={...a.storage.settings,[v]:P};a.storage.settings=C,g("info",`Setting updated: ${v}`,{newValue:P})},E=()=>{const v=J(),P=v.map(C=>`[${C.timestamp}] ${C.type.toUpperCase()}: ${C.message}${C.data?" | Data: "+JSON.stringify(C.data):""}`).join(`
`);e.clipboard.setString(P),g("info","Logs copied to clipboard",{count:v.length}),h.showToast(`Copied ${v.length} log entries to clipboard`,0)},j=v=>{v?O.showConfirmationAlert({title:"\u26A0\uFE0F Enable Unsafe Features - Security Warning",content:"Unsafe features include token copying, manual token adding, and detailed logging. These features can compromise your account security if misused. Tokens provide full access to accounts and should never be shared. Only enable if you understand the security implications.",confirmText:"I Understand - Enable",cancelText:"Cancel",confirmColor:"brand",onConfirm:()=>y("enableUnsafeFeatures",!0)}):y("enableUnsafeFeatures",!1)},_=()=>{r(null)},G=()=>{const v=d.callback;r(null),v()};return d?e.React.createElement(be,{dialogInfo:d,onCancel:_,onSuccess:G,storage:a.storage}):e.React.createElement(e.ReactNative.View,{style:{flex:1,backgroundColor:"#2f3136"}},[e.React.createElement(e.ReactNative.View,{key:"header",style:{flexDirection:"row",alignItems:"center",padding:16,backgroundColor:"#202225",borderBottomWidth:1,borderBottomColor:"#40444b"}},[e.React.createElement(e.ReactNative.TouchableOpacity,{key:"back",onPress:t,style:{marginRight:16}},e.React.createElement(e.ReactNative.Text,{style:{color:"#7289da",fontSize:16}},"\u2190 Back to Accounts")),e.React.createElement(e.ReactNative.Text,{key:"title",style:{color:"white",fontSize:18,fontWeight:"bold"}},"Settings")]),e.React.createElement(e.ReactNative.ScrollView,{key:"content",style:{flex:1,padding:16},contentContainerStyle:{paddingBottom:100}},[e.React.createElement(e.ReactNative.View,{key:"export-import",style:{marginBottom:24}},[e.React.createElement(e.ReactNative.Text,{key:"export-title",style:{color:"#b9bbbe",fontSize:14,fontWeight:"bold",marginBottom:12}},"BACKUP & RESTORE"),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"export-btn",onPress:()=>ve(a.storage,r),style:{backgroundColor:"#7289da",paddingVertical:12,paddingHorizontal:16,borderRadius:8,marginBottom:12,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:16,fontWeight:"bold"}},"\u{1F4E4} Export Accounts to Clipboard")),e.React.createElement(e.ReactNative.TextInput,{key:"import-input",placeholder:"Paste exported account data here (or leave empty to use clipboard)...",placeholderTextColor:"#72767d",value:o,onChangeText:n,multiline:!0,numberOfLines:4,style:{backgroundColor:"#40444b",color:"white",padding:12,borderRadius:8,marginBottom:12,fontSize:14,textAlignVertical:"top"}}),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"import-btn",onPress:()=>Te(a.storage,r,o),style:{backgroundColor:"#43b581",paddingVertical:12,paddingHorizontal:16,borderRadius:8,marginBottom:12,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:16,fontWeight:"bold"}},"\u{1F4E5} Import Accounts")),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"force-logout-btn",onPress:Ee,style:{backgroundColor:"#f04747",paddingVertical:12,paddingHorizontal:16,borderRadius:8,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:16,fontWeight:"bold"}},"\u{1F6AA} Force Logout"))]),e.React.createElement(e.ReactNative.View,{key:"export-password",style:{marginBottom:24}},[e.React.createElement(e.ReactNative.Text,{key:"password-title",style:{color:"#b9bbbe",fontSize:14,fontWeight:"bold",marginBottom:12}},"EXPORT PASSWORD PROTECTION"),a.storage.settings.exportPasswordHash?e.React.createElement(e.ReactNative.View,{key:"password-set"},[e.React.createElement(e.ReactNative.Text,{key:"status",style:{color:"#43b581",fontSize:16,marginBottom:12}},"\u2713 Export password is set (hashed)"),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"remove-pwd",onPress:()=>me(a.storage,r),style:{backgroundColor:"#f04747",paddingVertical:12,paddingHorizontal:16,borderRadius:8,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:16,fontWeight:"bold"}},"Remove Password"))]):e.React.createElement(e.ReactNative.View,{key:"password-unset"},[e.React.createElement(e.ReactNative.Text,{key:"desc",style:{color:"#72767d",fontSize:14,marginBottom:12}},"Set a password to protect your account exports and imports (will be hashed for security)"),e.React.createElement(e.ReactNative.TextInput,{key:"new-password",placeholder:"New password",placeholderTextColor:"#72767d",value:p,onChangeText:f,secureTextEntry:!0,style:{backgroundColor:"#40444b",color:"white",padding:12,borderRadius:8,marginBottom:8,fontSize:14}}),e.React.createElement(e.ReactNative.TextInput,{key:"confirm-password",placeholder:"Confirm password",placeholderTextColor:"#72767d",value:R,onChangeText:l,secureTextEntry:!0,style:{backgroundColor:"#40444b",color:"white",padding:12,borderRadius:8,marginBottom:12,fontSize:14}}),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"set-password",onPress:()=>ke(a.storage,p,R,f,l),style:{backgroundColor:"#7289da",paddingVertical:12,paddingHorizontal:16,borderRadius:8,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:16,fontWeight:"bold"}},"Set Password"))])]),e.React.createElement(e.ReactNative.View,{key:"unsafe",style:{marginBottom:24}},[e.React.createElement(e.ReactNative.Text,{key:"unsafe-title",style:{color:"#f04747",fontSize:14,fontWeight:"bold",marginBottom:12}},"UNSAFE FEATURES"),e.React.createElement(e.ReactNative.View,{key:"enable-unsafe",style:{flexDirection:"row",justifyContent:"space-between",alignItems:"center",paddingVertical:12,backgroundColor:"#36393f",paddingHorizontal:16,borderRadius:8,marginBottom:8}},[e.React.createElement(e.ReactNative.View,{key:"text-container",style:{flex:1}},[e.React.createElement(e.ReactNative.Text,{key:"label",style:{color:"white",fontSize:16}},"Enable Unsafe Features"),e.React.createElement(e.ReactNative.Text,{key:"desc",style:{color:"#72767d",fontSize:12,marginTop:2}},"Allows token operations, detailed logging, and troubleshooting")]),e.React.createElement(e.ReactNative.Switch,{key:"toggle",value:a.storage.settings.enableUnsafeFeatures,onValueChange:j,trackColor:{false:"#72767d",true:"#f04747"},thumbColor:"white"})]),a.storage.settings.enableUnsafeFeatures&&e.React.createElement(e.ReactNative.View,{key:"unsafe-features",style:{marginTop:16}},[e.React.createElement(e.ReactNative.Text,{key:"logging-title",style:{color:"#b9bbbe",fontSize:14,fontWeight:"bold",marginBottom:8}},"TROUBLESHOOTING & LOGGING"),e.React.createElement(e.ReactNative.View,{key:"log-actions",style:{flexDirection:"row",gap:8,marginBottom:16}},[e.React.createElement(e.ReactNative.TouchableOpacity,{key:"copy-logs",onPress:E,style:{flex:1,backgroundColor:"#7289da",paddingVertical:10,paddingHorizontal:12,borderRadius:6,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:14,fontWeight:"bold"}},`Copy Logs (${J().length})`)),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"clear-logs",onPress:we,style:{flex:1,backgroundColor:"#f04747",paddingVertical:10,paddingHorizontal:12,borderRadius:6,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:14,fontWeight:"bold"}},"Clear Logs"))]),e.React.createElement(e.ReactNative.Text,{key:"token-title",style:{color:"#b9bbbe",fontSize:14,fontWeight:"bold",marginBottom:8}},"ADD ACCOUNT VIA TOKEN"),e.React.createElement(e.ReactNative.TextInput,{key:"token-input",placeholder:"Paste account token here (leave empty to add current account)...",placeholderTextColor:"#72767d",value:s,onChangeText:u,secureTextEntry:!0,style:{backgroundColor:"#40444b",color:"white",padding:12,borderRadius:8,marginBottom:12,fontSize:14}}),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"add-btn",onPress:()=>Se(a.storage,s,u,c),disabled:i,style:{backgroundColor:i?"#5c6bc0":"#7289da",paddingVertical:12,paddingHorizontal:20,borderRadius:8,alignItems:"center",opacity:i?.6:1}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:16,fontWeight:"bold"}},i?"Adding...":s.trim()?"Add Account":"Add Current Account"))])]),e.React.createElement(e.ReactNative.View,{key:"general",style:{marginBottom:24}},[e.React.createElement(e.ReactNative.Text,{key:"general-title",style:{color:"#b9bbbe",fontSize:14,fontWeight:"bold",marginBottom:12}},"GENERAL"),e.React.createElement(e.ReactNative.View,{key:"enable-cli",style:{flexDirection:"row",justifyContent:"space-between",alignItems:"center",paddingVertical:12,backgroundColor:"#36393f",paddingHorizontal:16,borderRadius:8,marginBottom:8}},[e.React.createElement(e.ReactNative.Text,{key:"label",style:{color:"white",fontSize:16}},"Enable CLI Interface"),e.React.createElement(e.ReactNative.Switch,{key:"toggle",value:a.storage.settings.enableCLI,onValueChange:v=>y("enableCLI",v),trackColor:{false:"#72767d",true:"#7289da"},thumbColor:"white"})]),e.React.createElement(e.ReactNative.View,{key:"add-to-sidebar",style:{flexDirection:"row",justifyContent:"space-between",alignItems:"center",paddingVertical:12,backgroundColor:"#36393f",paddingHorizontal:16,borderRadius:8,marginBottom:8}},[e.React.createElement(e.ReactNative.View,{key:"text-container",style:{flex:1}},[e.React.createElement(e.ReactNative.Text,{key:"label",style:{color:"white",fontSize:16}},"Add to Settings Sidebar"),e.React.createElement(e.ReactNative.Text,{key:"desc",style:{color:"#72767d",fontSize:12,marginTop:2}},"Show Account Switcher in Revenge settings menu")]),e.React.createElement(e.ReactNative.Switch,{key:"toggle",value:a.storage.settings.addToSidebar,onValueChange:v=>{y("addToSidebar",v),v?h.showToast("Sidebar enabled - restart app to see changes",0):h.showToast("Sidebar disabled - restart app to remove",0)},trackColor:{false:"#72767d",true:"#7289da"},thumbColor:"white"})]),e.React.createElement(e.ReactNative.View,{key:"confirm-delete",style:{flexDirection:"row",justifyContent:"space-between",alignItems:"center",paddingVertical:12,backgroundColor:"#36393f",paddingHorizontal:16,borderRadius:8}},[e.React.createElement(e.ReactNative.Text,{key:"label",style:{color:"white",fontSize:16}},"Confirm Before Delete"),e.React.createElement(e.ReactNative.Switch,{key:"toggle",value:a.storage.settings.confirmBeforeDelete,onValueChange:v=>y("confirmBeforeDelete",v),trackColor:{false:"#72767d",true:"#7289da"},thumbColor:"white"})])])])])}function ee(t){X.useProxy(a.storage);const[s,u]=e.React.useState(!1),[i,c]=e.React.useState(null),[o,n]=e.React.useState(!1),[d,r]=e.React.useState(""),[p,f]=e.React.useState(""),[R,l]=e.React.useState(!1),y=Y.getCurrentUser()?.id,E=w=>{const b=a.storage.accounts[w];if(!b)return;const k=w===y,x=b.username;g("info","Attempting to remove account",{username:x,isCurrent:k});const F=()=>{delete a.storage.accounts[w],a.storage.accountOrder=a.storage.accountOrder.filter(z=>z!==w)},oe=()=>{F(),g("info","Account removed from switcher only",{username:x}),h.showToast(`Account ${x} removed from switcher`,0)},ne=async()=>{try{g("info","Starting account removal and logout",{username:x});const z=Q.getToken();await T.findByProps("login","logout","switchAccountToken").switchAccountToken(b.token),g("debug","Switched to account for logout"),await T.findByProps("login","logout").logout(),g("debug","Account logged out from Discord"),setTimeout(async()=>{try{await T.findByProps("login","logout","switchAccountToken").switchAccountToken(z),g("debug","Switched back to original account")}catch(Le){g("warn","Could not switch back to original account",{error:Le.message})}},100)}catch(z){g("error","Failed to logout account from Discord",{error:z.message}),h.showToast("Failed to logout, but removed from switcher",1)}F(),g("info","Account removed and logged out",{username:x}),h.showToast(`Account ${x} removed and logged out`,0)};a.storage.settings.confirmBeforeDelete?e.ReactNative.Alert.alert(k?"Remove Current Account":"Remove Account",k?"Do you want to remove the current account from the switcher? (To logout, use Force Logout in settings)":`What do you want to do with ${x}?`,[{text:"Cancel",style:"cancel"},{text:"Delete from switcher only",onPress:oe},!k&&{text:"Delete and logout",onPress:ne}].filter(Boolean)):k?oe():ne()},j=async w=>{const b=a.storage.accounts[w];if(b){c(w),g("info","Starting account switch",{username:b.username});try{h.showToast(`Switching to ${b.username}...`,0),await T.findByProps("login","logout","switchAccountToken").switchAccountToken(b.token),g("info","Account switch successful",{username:b.username}),h.showToast(`Switched to ${b.username}!`,0)}catch(k){g("error","Account switch failed",{username:b.username,error:k.message}),console.error("Switch error:",k),h.showToast(`Failed to switch: ${k.message}`,1)}c(null)}},_=w=>{if(!a.storage.settings.enableUnsafeFeatures)return;const b=a.storage.accounts[w];b&&(e.clipboard.setString(b.token),g("info","Token copied to clipboard",{username:b.username}),h.showToast(`Token for ${b.username} copied`,0))},G=async()=>{l(!0),g("info","Adding current account");try{const w=Q.getToken(),b=Y.getCurrentUser();if(!b||a.storage.accounts[b.id]){const x=a.storage.accounts[b.id]?"Current account already saved":"Failed to get current user";g("warn",x,{userId:b?.id}),h.showToast(x,1),l(!1);return}const k={id:b.id,username:b.username,discriminator:b.discriminator,avatar:b.avatar,displayName:b.globalName||b.username,token:w,addedAt:Date.now()};a.storage.accounts[b.id]=k,a.storage.accountOrder.includes(b.id)||a.storage.accountOrder.push(b.id),n(!1),g("info","Current account added successfully",{username:b.username}),h.showToast(`Current account ${b.username} added!`,0)}catch(w){g("error","Failed to add current account",{error:w.message}),console.error("Add current account error:",w),h.showToast("Failed to add current account",1)}l(!1)},v=async()=>{await xe(a.storage,d,p,r,f,n,l)},P=w=>new Date(w).toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"}),C=a.storage.accountOrder.filter(w=>a.storage.accounts[w]).map(w=>a.storage.accounts[w]);return s?e.React.createElement(Ce,{onBack:()=>u(!1)}):o?e.React.createElement(e.ReactNative.View,{style:{flex:1,backgroundColor:"#2f3136"}},[e.React.createElement(e.ReactNative.View,{key:"add-header",style:{flexDirection:"row",alignItems:"center",padding:16,backgroundColor:"#202225",borderBottomWidth:1,borderBottomColor:"#40444b"}},[e.React.createElement(e.ReactNative.TouchableOpacity,{key:"back",onPress:()=>{n(!1),r(""),f("")},style:{marginRight:16}},e.React.createElement(e.ReactNative.Text,{style:{color:"#7289da",fontSize:16}},"\u2190 Back")),e.React.createElement(e.ReactNative.Text,{key:"title",style:{color:"white",fontSize:18,fontWeight:"bold"}},"Add Account")]),e.React.createElement(e.ReactNative.ScrollView,{key:"add-content",style:{flex:1},contentContainerStyle:{padding:16,paddingBottom:100}},[e.React.createElement(e.ReactNative.Text,{key:"instruction",style:{color:"#b9bbbe",fontSize:16,marginBottom:20,textAlign:"center"}},"Enter your Discord account credentials or add your current account"),e.React.createElement(e.ReactNative.TextInput,{key:"email-input",placeholder:"Email address",placeholderTextColor:"#72767d",value:d,onChangeText:r,keyboardType:"email-address",autoCapitalize:"none",style:{backgroundColor:"#40444b",color:"white",padding:16,borderRadius:8,marginBottom:12,fontSize:16}}),e.React.createElement(e.ReactNative.TextInput,{key:"password-input",placeholder:"Password",placeholderTextColor:"#72767d",value:p,onChangeText:f,secureTextEntry:!0,style:{backgroundColor:"#40444b",color:"white",padding:16,borderRadius:8,marginBottom:20,fontSize:16}}),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"login-btn",onPress:v,disabled:R,style:{backgroundColor:R?"#5c6bc0":"#7289da",paddingVertical:16,paddingHorizontal:20,borderRadius:8,alignItems:"center",marginBottom:12,opacity:R?.6:1}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:18,fontWeight:"bold"}},R?"Adding Account...":"Add Account with Email & Password")),e.React.createElement(e.ReactNative.View,{key:"divider",style:{height:1,backgroundColor:"#40444b",marginVertical:16}}),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"add-current-btn",onPress:G,disabled:R,style:{backgroundColor:R?"#5c6bc0":"#43b581",paddingVertical:16,paddingHorizontal:20,borderRadius:8,alignItems:"center",opacity:R?.6:1}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:18,fontWeight:"bold"}},R?"Adding...":"Add Current Account"))])]):e.React.createElement(e.ReactNative.View,{style:{flex:1,backgroundColor:"#2f3136"}},[e.React.createElement(e.ReactNative.View,{key:"header",style:{flexDirection:"row",alignItems:"center",justifyContent:"space-between",padding:16,backgroundColor:"#202225",borderBottomWidth:1,borderBottomColor:"#40444b"}},[e.React.createElement(e.ReactNative.Text,{key:"title",style:{color:"white",fontSize:20,fontWeight:"bold"}},"Account Switcher"),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"settings-btn",onPress:()=>u(!0),style:{padding:8,borderRadius:6,backgroundColor:"#4f545c"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:18}},"\u2699\uFE0F"))]),e.React.createElement(e.ReactNative.View,{key:"accounts-section",style:{flex:1,padding:16}},[e.React.createElement(e.ReactNative.Text,{key:"section-title",style:{color:"#b9bbbe",fontSize:14,fontWeight:"bold",marginBottom:12}},`SAVED ACCOUNTS (${C.length})`),C.length===0?e.React.createElement(e.ReactNative.View,{key:"empty",style:{alignItems:"center",justifyContent:"center",paddingVertical:40}},[e.React.createElement(e.ReactNative.Text,{key:"empty-text",style:{color:"#72767d",fontSize:16,marginBottom:8}},"No accounts saved yet"),e.React.createElement(e.ReactNative.Text,{key:"empty-hint",style:{color:"#72767d",fontSize:14,textAlign:"center"}},"Access the switcher by pressing the logout button on the main settings page.")]):e.React.createElement(e.ReactNative.ScrollView,{key:"accounts-scroll",style:{flex:1},contentContainerStyle:{paddingBottom:100}},C.map((w,b)=>{const k=w.id===y,x=i===w.id;let F="https://cdn.discordapp.com/embed/avatars/1.png";return w.avatar&&(F=`https://cdn.discordapp.com/avatars/${w.id}/${w.avatar}.png?size=48`),e.React.createElement(e.ReactNative.View,{key:w.id,style:{flexDirection:"row",alignItems:"center",backgroundColor:k?"#7289da20":"#36393f",borderWidth:k?2:0,borderColor:"#7289da",borderRadius:12,padding:12,marginBottom:12}},[e.React.createElement(e.ReactNative.TouchableOpacity,{key:"avatar",onPress:()=>j(w.id),disabled:k||x,style:{marginRight:12}},e.React.createElement(e.ReactNative.Image,{source:{uri:F},style:{width:48,height:48,borderRadius:24,opacity:k||x?.7:1}})),e.React.createElement(e.ReactNative.View,{key:"info",style:{flex:1}},[e.React.createElement(e.ReactNative.Text,{key:"name",style:{color:"white",fontSize:16,fontWeight:"bold"}},`${b+1}. ${a.storage.settings.enableCLI?`${w.username}${w.discriminator!=="0"?`#${w.discriminator}`:""}`:w.displayName}`),e.React.createElement(e.ReactNative.Text,{key:"status",style:{color:k?"#43b581":"#72767d",fontSize:12,marginTop:2}},k?"\u2713 Current Account":x?"Switching...":"Tap avatar to switch"),e.React.createElement(e.ReactNative.Text,{key:"date",style:{color:"#72767d",fontSize:11,marginTop:2}},`Added: ${P(w.addedAt||Date.now())}`)]),e.React.createElement(e.ReactNative.View,{key:"actions",style:{flexDirection:"column",alignItems:"flex-end"}},[a.storage.settings.enableUnsafeFeatures&&e.React.createElement(e.ReactNative.TouchableOpacity,{key:"copy",onPress:()=>_(w.id),style:{backgroundColor:"#4f545c",paddingHorizontal:12,paddingVertical:6,borderRadius:6,minWidth:80,alignItems:"center",marginBottom:6}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:12,fontWeight:"bold"}},"Copy Token")),e.React.createElement(e.ReactNative.TouchableOpacity,{key:"remove",onPress:()=>E(w.id),style:{backgroundColor:"#f04747",paddingHorizontal:12,paddingVertical:6,borderRadius:6,minWidth:80,alignItems:"center"}},e.React.createElement(e.ReactNative.Text,{style:{color:"white",fontSize:12,fontWeight:"bold"}},"Remove"))])])}))]),e.React.createElement(e.ReactNative.View,{key:"bottom-actions",style:{position:"absolute",bottom:0,left:0,right:0,backgroundColor:"#202225",borderTopWidth:1,borderTopColor:"#40444b",paddingVertical:12,paddingHorizontal:16,paddingBottom:40}},e.React.createElement(e.ReactNative.TouchableOpacity,{key:"add",onPress:()=>n(!0),style:{backgroundColor:"#7289da",paddingVertical:16,paddingHorizontal:20,borderRadius:8,alignItems:"center",flexDirection:"row",justifyContent:"center"}},[e.React.createElement(e.ReactNative.Text,{key:"add-icon",style:{color:"white",fontSize:20,marginRight:8}},"+"),e.React.createElement(e.ReactNative.Text,{key:"add-text",style:{color:"white",fontSize:18,fontWeight:"bold"}},"Add Account")]))])}const{FormSection:Ae,FormRow:W}=le.Forms,{TableRowIcon:Ne}=T.findByProps("TableRowIcon"),V=window.bunny,te=V?.metro?.findByPropsLazy("getRootNavigationRef"),M=V?.metro?.findByPropsLazy("SETTING_RENDERER_CONFIG"),ae=V?.metro?.findByNameLazy("SettingsOverviewScreen",!1);function Ie({tabs:t}){const s=e.NavigationNative.useNavigation();return e.React.createElement(W,{label:t.title(),leading:e.React.createElement(W.Icon,{source:t.icon}),trailing:e.React.createElement(e.React.Fragment,{},[t.trailing?t.trailing():null,e.React.createElement(W.Arrow,{key:"arrow"})]),onPress:()=>{const u=t.page;s.navigate("VendettaCustomPage",{title:t.title(),render:()=>e.React.createElement(u)})}})}function Pe(t,s){try{s.push(D.after("default",V?.metro?.findByNameLazy("UserSettingsOverviewWrapper",!1),(u,i)=>{const c=U.findInReactTree(i.props.children,o=>o.type?.name==="UserSettingsOverview");c&&s.push(D.after("render",c.type.prototype,(o,n)=>{const d=U.findInReactTree(n.props.children,r=>r?.children?.[1]?.type===Ae)?.children;if(d){const r=d.findIndex(p=>["BILLING_SETTINGS","PREMIUM_SETTINGS"].includes(p?.props?.label));d.splice(-~r||4,0,e.React.createElement(Ie,{key:t.key,tabs:t}))}}))},!0))}catch(u){ue.logger.info("Panel UI patch failed graciously \u{1F494}",u)}}function Oe(t,s){if(!M||!ae||!te){console.warn("[AccountSwitcher] Missing required constants for tabs UI patch");return}const u={};u[t.key]={type:"pressable",title:t.title,icon:t.icon,IconComponent:t.icon&&(()=>{const o=typeof t.icon=="object"&&t.icon.uri!==void 0?t.icon.uri:t.icon;return e.React.createElement(Ne,{source:o})}),usePredicate:t.predicate,useTrailing:t.trailing,onPress:()=>{const o=te.getRootNavigationRef(),n=t.page;o.navigate("VendettaCustomPage",{title:t.title(),render:()=>e.React.createElement(n)})},withArrow:!0};let i=M.SETTING_RENDERER_CONFIG;Object.defineProperty(M,"SETTING_RENDERER_CONFIG",{enumerable:!0,configurable:!0,get:()=>({...i,...u}),set:o=>i=o});const c=Symbol("AccountSwitcher-pinToSettings");s.push(D.after("default",ae,(o,n)=>{if(!o[0][c]){o[0][c]=!0;const{sections:d}=U.findInReactTree(n,p=>p.props?.sections).props,r=d?.find(p=>["Bunny","Revenge"].some(f=>p.label===f&&p.title===f));r?.settings&&(r.settings=[...r.settings,t.key])}}))}function Be(t){const s=[];let u=!1;const i=t.predicate||(()=>!0);return t.predicate=()=>u?!1:i(),Pe(t,s),Oe(t,s),s.push(()=>u=!0),()=>{for(const c of s)c()}}function Fe(){if(!a.storage.settings?.addToSidebar)return console.log("[AccountSwitcher] Sidebar disabled in settings"),()=>{};console.log("[AccountSwitcher] Patching sidebar using custom patchSettingsPin...");try{const t=Be({key:"AccountSwitcher",icon:de.getAssetIDByName("UserIcon"),title:()=>"Account Switcher",predicate:()=>a.storage.settings?.addToSidebar===!0,page:ee});return console.log("[AccountSwitcher] Successfully patched sidebar"),t}catch(t){return console.error("[AccountSwitcher] Failed to patch sidebar:",t),()=>{}}}const{meta:{resolveSemanticColor:ze}}=T.findByProps("colors","meta"),$e=T.findByStoreName("ThemeStore"),A=T.findByStoreName("UserStore"),m=()=>parseInt(ze($e.theme,se.semanticColors.BACKGROUND_SECONDARY).slice(1),16),I={author:{username:"AccountSwitcher",avatar:"command",avatarURL:fe?.command}};a.storage.accounts||(a.storage.accounts={}),a.storage.accountOrder||(a.storage.accountOrder=[]),a.storage.settings?(a.storage.settings.enableUnsafeFeatures===void 0&&(a.storage.settings.enableUnsafeFeatures=!1),a.storage.settings.enableCLI===void 0&&(a.storage.settings.enableCLI=a.storage.settings.showAccountNames!==!1),a.storage.settings.confirmBeforeDelete===void 0&&(a.storage.settings.confirmBeforeDelete=!0),a.storage.settings.addToSidebar===void 0&&(a.storage.settings.addToSidebar=!0),a.storage.settings.showAccountNames!==void 0&&delete a.storage.settings.showAccountNames):a.storage.settings={enableCLI:!0,confirmBeforeDelete:!0,enableUnsafeFeatures:!1,addToSidebar:!0};let H;function S(){return window.sendMessage?window.sendMessage?.(...arguments):(H||(H=ge?.(vendetta)),H?.(...arguments))}function N(t){return!t||!t.username?"Unknown Account":t.username}function re(t){const s=a.storage.accounts||{},u=a.storage.accountOrder||[],i=parseInt(t);if(!isNaN(i)&&i>=1&&i<=u.length){const c=u[i-1];return s[c]?[c,s[c]]:null}return Object.entries(s).find(([c,o])=>o.username.toLowerCase()===t.toLowerCase()||N(o).toLowerCase()===t.toLowerCase())}function L(t){const s=(a.storage.accountOrder||[]).indexOf(t);return s>=0?s+1:null}function Ue(t){a.storage.accountOrder||(a.storage.accountOrder=[]),a.storage.accountOrder.includes(t)||a.storage.accountOrder.push(t)}function De(t){a.storage.accountOrder||(a.storage.accountOrder=[]);const s=a.storage.accountOrder.indexOf(t);s>-1&&a.storage.accountOrder.splice(s,1)}var Ve={meta:vendetta.plugin,settings:ee,patches:[],onUnload(){this.patches.forEach(t=>t()),this.patches=[]},onLoad(){const t=Fe();this.patches.push(t);const s="Copy Token",u=D.before("render",T.findByProps("ScrollView").View,c=>{try{if(!a.storage.settings?.enableUnsafeFeatures)return;let o=U.findInReactTree(c,f=>f.key===".$UserProfileOverflow");if(!o||!o.props||o.props.sheetKey!=="UserProfileOverflow")return;const n=o.props.content.props;if(n.options.some(f=>f?.label===s))return;const d=A.getCurrentUser()?.id,r=Object.keys(o._owner.stateNode._keyChildMapping).find(f=>o._owner.stateNode._keyChildMapping[f]&&f.match(/(?<=\$UserProfile)\d+/))?.slice?.(13)||d,p=T.findByProps("getToken").getToken();n.options.unshift({isDestructive:!0,label:s,onPress:()=>{try{h.showToast(r===d?"Copied your token":`Copied token of ${n.header.title}`),ie.setString(r===d?p:[Buffer.from(r).toString("base64").replaceAll("=",""),ye?.(+Date.now()-129384e4,!0)||"dummy",he?.(K,27)||"dummy"].join(".")),n.hideActionSheet()}catch(f){console.error(f),h.showToast("Failed to copy token",1)}}})}catch(o){console.error("Context menu patch error:",o)}});this.patches.push(u);const i={async mainCommand(c,o){try{const n={...I,interaction:{name:"/accswitcher",user:A.getCurrentUser()}};S?.({loggingName:"AccSwitcher main message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u{1F4F1} Account Switcher",description:a.storage.settings.addToSidebar?"Account Manager is available in your settings sidebar!\n\nQuick commands:\n\u2022 `/accswitcher login <#>` - Switch to account\n\u2022 `/accswitcher add` - Add current account\n\u2022 `/accswitcher list` - Show all accounts":"Opening Account Manager...\n\nQuick commands:\n\u2022 `/accswitcher login <#>` - Switch to account\n\u2022 `/accswitcher add` - Add current account\n\u2022 `/accswitcher list` - Show all accounts",footer:{text:a.storage.settings.addToSidebar?"Check your settings sidebar for Account Switcher":"Check plugin settings for the Account Manager interface"}}]},n),h.showToast(a.storage.settings.addToSidebar?"Check settings sidebar for Account Switcher":"Check plugin settings to access Account Manager",0)}catch(n){console.error("Main command error:",n),h.showToast("Check plugin settings to access Account Manager",1)}},async addAccount(c,o){try{const n={...I,interaction:{name:"/accswitcher add",user:A.getCurrentUser()}},d=T.findByProps("getToken").getToken(),r=A.getCurrentUser();if(!r){S?.({loggingName:"Add account error message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u274C Failed to Get Current User",description:"Could not retrieve current user information."}]},n);return}if(a.storage.accounts[r.id]){const R=L(r.id);S?.({loggingName:"Add account warning message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u26A0\uFE0F Account Already Saved",description:`Your current account **${R}. ${r.username}** is already saved.`}]},n);return}const p={id:r.id,username:r.username,discriminator:r.discriminator,avatar:r.avatar,displayName:r.globalName||r.username,token:d,addedAt:Date.now()};a.storage.accounts[r.id]=p,Ue(r.id);const f=L(r.id);S?.({loggingName:"Add account success message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u2705 Account Added Successfully",description:`**${f}. ${r.username}** has been saved.`,footer:{text:`Total accounts: ${Object.keys(a.storage.accounts).length}`}}]},n)}catch(n){console.error("Add account error:",n),h.showToast("Failed to add account",1)}},async login(c,o){try{const n={...I,interaction:{name:"/accswitcher login",user:A.getCurrentUser()}},d=new Map(c.map(l=>[l.name,l])).get("account")?.value;if(!d){S?.({loggingName:"Login error message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u274C No Account Specified",description:"Please specify an account number, username, or ID."}]},n);return}const r=re(d);if(!r){const l=(a.storage.accountOrder||[]).filter(y=>a.storage.accounts[y]).map((y,E)=>`${E+1}. ${N(a.storage.accounts[y])}`).join(`
`);S?.({loggingName:"Login error message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u274C Account Not Found",description:`Could not find account "${d}".${l?`

**Available accounts:**
${l}`:"\n\nNo accounts saved yet. Use `/accswitcher add` first."}`}]},n);return}const[p,f]=r,R=L(p);S?.({loggingName:"Login process message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:`\u{1F504} Switching to ${R}. ${N(f)}...`}]},n);try{await T.findByProps("login","logout","switchAccountToken").switchAccountToken(f.token),h.showToast(`Switched to ${R}. ${N(f)}!`,0)}catch(l){console.error("Switch error:",l),S?.({loggingName:"Login failure message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u274C Failed to switch accounts",description:`Error: ${l.message}`}]},n)}}catch(n){console.error("Login command error:",n),h.showToast("Failed to execute login command",1)}},listAccounts(c,o){try{const n={...I,interaction:{name:"/accswitcher list",user:A.getCurrentUser()}},d=a.storage.accounts||{},r=Object.keys(d).length;if(r===0){S?.({loggingName:"List accounts empty message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u{1F4DD} No Saved Accounts",description:"Use `/accswitcher add` to save your current account."}]},n);return}const p=(a.storage.accountOrder||[]).filter(f=>d[f]).map((f,R)=>{const l=d[f],y=N(l),E=new Date(l.addedAt).toLocaleDateString();return`**${R+1}.** ${y} - Added: ${E}`}).join(`
`);S?.({loggingName:"List accounts message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:`\u{1F4DD} Saved Accounts (${r})`,description:p,footer:{text:"Use /accswitcher login <number or username> to switch accounts"}}]},n)}catch(n){console.error("List accounts error:",n),h.showToast("Failed to list accounts",1)}},removeAccount(c,o){try{const n={...I,interaction:{name:"/accswitcher remove",user:A.getCurrentUser()}},d=new Map(c.map(l=>[l.name,l])).get("account")?.value;if(!d){S?.({loggingName:"Remove account error message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u274C No Account Specified",description:"Please specify an account number, username, or ID to remove."}]},n);return}const r=re(d);if(!r){const l=(a.storage.accountOrder||[]).filter(y=>a.storage.accounts[y]).map((y,E)=>`${E+1}. ${N(a.storage.accounts[y])}`).join(`
`);S?.({loggingName:"Remove account error message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u274C Account Not Found",description:`Could not find account "${d}".${l?`

**Available accounts:**
${l}`:`

No accounts saved yet.`}`}]},n);return}const[p,f]=r,R=`${L(p)}. ${N(f)}`;delete a.storage.accounts[p],De(p),S?.({loggingName:"Remove account success message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u{1F5D1}\uFE0F Account Removed",description:`**${R}** has been removed from saved accounts.`,footer:{text:`Remaining accounts: ${Object.keys(a.storage.accounts).length}`}}]},n)}catch(n){console.error("Remove account error:",n),h.showToast("Failed to remove account",1)}},getCurrentToken(c,o){try{const n={...I,interaction:{name:"/accswitcher token",user:A.getCurrentUser()}};if(!a.storage.settings?.enableUnsafeFeatures){S?.({loggingName:"Get token disabled message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u{1F512} Unsafe Features Disabled",description:"Token access is disabled. Enable 'Unsafe Features' in plugin settings to use this command."}]},n);return}const{getToken:d}=T.findByProps("getToken"),r=d();S?.({loggingName:"Get token message",channelId:o.channel.id,embeds:[{color:m(),type:"rich",title:"\u{1F511} Current Account Token",description:`\`${r}\``,footer:{text:"\u26A0\uFE0F Keep your token secure and never share it!"}}]},n)}catch(n){console.error("Get token error:",n),h.showToast("Failed to get current token",1)}}};try{[{type:1,inputType:1,applicationId:"-1",execute:i.mainCommand,name:"accswitcher",description:"Open Account Switcher (check plugin settings)",options:[]},{type:1,inputType:1,applicationId:"-1",execute:i.addAccount,name:"accswitcher add",description:"Add your current account to saved accounts",options:[]},{type:1,inputType:1,applicationId:"-1",execute:i.login,name:"accswitcher login",description:"Switch to a saved account",options:[{required:!0,type:3,name:"account",description:"Account number, username, or ID to switch to"}]},{type:1,inputType:1,applicationId:"-1",execute:i.listAccounts,name:"accswitcher list",description:"Show all saved accounts",options:[]},{type:1,inputType:1,applicationId:"-1",execute:i.removeAccount,name:"accswitcher remove",description:"Remove a saved account",options:[{required:!0,type:3,name:"account",description:"Account number, username, or ID to remove"}]},{type:1,inputType:1,applicationId:"-1",execute:i.getCurrentToken,name:"accswitcher token",description:"Get your current account token (requires unsafe features)",options:[]}].forEach(c=>{try{ce.registerCommand(c)}catch(o){console.error(`Failed to register command ${c.name}:`,o)}}),console.log("Account Switcher plugin loaded successfully")}catch(c){console.error("Failed to register commands:",c)}}};return $.EMBED_COLOR=m,$.default=Ve,Object.defineProperty($,"__esModule",{value:!0}),$})({},vendetta.ui,vendetta.commands,vendetta.metro,vendetta.utils,vendetta.metro.common.clipboard,vendetta.patcher,vendetta.ui.toasts,vendetta.plugin,vendetta.metro.common,vendetta.storage,vendetta.ui.alerts,vendetta.ui.assets,vendetta.ui.components,vendetta);
